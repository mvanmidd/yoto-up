name: Cross-platform flet build (Windows / macOS / Linux)

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.2.3
  workflow_dispatch:

permissions:
  contents: write    # allow creating/releases and attaching assets
  actions: read

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    # Force UTF-8 output for Python processes to avoid Windows console encoding errors
    env:
      PYTHONUTF8: '1'
      PYTHONIOENCODING: 'utf-8'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.13]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r yoto_app/requirements.txt

      # Adjust ENTRY_SCRIPT below if your GUI entrypoint is different (e.g. yoto.py)
      - name: Build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Use a deterministic name so artifacts are predictable
          flet build linux --module-name gui.py -o dist

          # create a tarball for the built executable
          mkdir -p out
          if [ -f dist/yoto-up ]; then
            tar -czf out/yoto-up-${{ runner.os }}.tar.gz -C dist yoto-up
          else
            # fallback: include whole dist directory
            tar -czf out/yoto-up-${{ runner.os }}.tar.gz -C dist .
          fi
        shell: bash

      - name: Build (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Use a deterministic name so artifacts are predictable
          flet build macos --module-name gui.py -o dist
          # create a tarball for the built executable
          mkdir -p out
          if [ -f dist/yoto-up.app ]; then
            tar -czf out/yoto-up-${{ runner.os }}.tar.gz -C dist yoto-up.app
          else
            # fallback: include whole dist directory
            tar -czf out/yoto-up-${{ runner.os }}.tar.gz -C dist .
          fi
        shell: bash

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          flet build windows --module-name gui.py -o dist
          New-Item -ItemType Directory -Path out -Force | Out-Null

          # Use Get-ChildItem to check for files in dist safely
          $files = Get-ChildItem -Path dist -Recurse -File -ErrorAction SilentlyContinue
          if ($files -and $files.Count -gt 0) {
            # Compress all files under dist into a zip
            Compress-Archive -Path (Join-Path -Path (Resolve-Path dist).Path -ChildPath '*') -DestinationPath out\yoto-up-windows.zip -Force
          } else {
            # Create a small placeholder so upload-artifact won't fail
            "No build artifacts produced on Windows" | Out-File -FilePath out\yoto-up-windows.txt -Encoding UTF8
            Compress-Archive -Path out\yoto-up-windows.txt -DestinationPath out\yoto-up-windows.zip -Force
          }
        shell: pwsh

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: yoto-up-${{ matrix.os }}
          path: out

  # A single job to gather the per-platform artifacts and create a GitHub Release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository (for context)
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: out_artifacts

      - name: List downloaded artifacts (debug)
        run: |
          ls -la out_artifacts || true

      - name: Create GitHub Release and upload artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: out_artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
